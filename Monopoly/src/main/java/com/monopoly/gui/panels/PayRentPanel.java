/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.monopoly.gui.panels;

import com.monopoly.app.Contratto;
import com.monopoly.app.GestoreContratti;
import com.monopoly.app.Giocatore;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Lorenzo Lepore - Matricola: 172416
 */
@SuppressWarnings("SpellCheckingInspection")
public class PayRentPanel extends javax.swing.JPanel {

    private final JFrame actualFrame;
    private final GestoreContratti gestoreContratti;
    private final Giocatore giocatoreAttuale;
    private final GameboardPanel gameboardPanel;
    private final ArrayList<Contratto> affitti;
    
    /**
     * Creates new form PayRentPanel
     * @param actualFrame
     */
    public PayRentPanel(JFrame actualFrame, GestoreContratti gestoreContratti, Giocatore giocatoreAttuale, GameboardPanel gameboardPanel) {
        
        initComponents();
        
        this.actualFrame = actualFrame;
        this.gestoreContratti = gestoreContratti;
        this.giocatoreAttuale = giocatoreAttuale;
        this.gameboardPanel = gameboardPanel;
        
        affitti = new ArrayList<>(this.gestoreContratti.getContratti());
        for(Contratto contrattoGiocatore : giocatoreAttuale.getContrattiPosseduti()){
            affitti.removeIf(contratto -> (contratto.getNome().equalsIgnoreCase(contrattoGiocatore.getNome())));
        }
        
        DefaultListModel contrattiListModel = new DefaultListModel();
        
        for(Contratto contratto : affitti){
            contrattiListModel.addElement(contratto + " (" + contratto.getCostoAffitto() + "â‚¬)");
        }
        
        contrattiList.setModel(contrattiListModel);
        
        this.annullaButton.addActionListener(
                ActionEvent -> HandleAnnullaButton()
        );
        
        this.pagaButton.addActionListener(
                ActionEvent -> HandlePagaButton()
        );
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pagaButton = new javax.swing.JButton();
        annullaButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contrattiList = new javax.swing.JList<>();

        setBackground(new java.awt.Color(204, 255, 204));

        pagaButton.setText("Paga");

        annullaButton.setText("Annulla");

        jLabel1.setText("Selezionare il contratto del quale si desidera pagare l'affitto:");

        jScrollPane2.setViewportView(contrattiList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 238, Short.MAX_VALUE)
                        .addComponent(annullaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pagaButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pagaButton)
                    .addComponent(annullaButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annullaButton;
    private javax.swing.JList<String> contrattiList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton pagaButton;
    // End of variables declaration//GEN-END:variables

    private void HandleAnnullaButton(){
        this.actualFrame.dispose();
    }  

    private void HandlePagaButton(){
        for(Contratto contratto : affitti){
            if (contrattiList.getSelectedValue().contains(contratto.getNome())){
  
                giocatoreAttuale.addDenaro(-contratto.getCostoAffitto());
                
                JOptionPane.showMessageDialog(
                        this.getParent(), 
                        "Affitto pagato con successo.",
                        "Operazione andata a buon fine",
                        JOptionPane.INFORMATION_MESSAGE
                );
                
                this.gameboardPanel.updateInfoTextArea();
                this.actualFrame.dispose();

            }
        }
    }
    
}
